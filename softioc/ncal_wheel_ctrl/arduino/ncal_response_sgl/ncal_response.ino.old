/* ncal_response
 *  
 *  simple command/response access via USB to Teensy
 */

//Declare libraries
#include <SoftwareSerial.h>               // see https://www.pjrc.com/teensy/td_libs_SoftwareSerial.html
#include <FreqMeasure.h>                  // see https://www.pjrc.com/teensy/td_libs_FreqMeasure.html


const String SOFTWARE_VERSION = "2020-01-06";
const String SOFTWARE_ID = "ncal_response";

const byte BUFFER_LENGTH = 32;
const int COMMAND_LENGTH = 16;

const char START_MARKER = '>';            // Not used
const char END_MARKER = '\n';

const long USB_BAUD = 250000;

const int UNDEFINED = -1;

const float PULL_FREQUENCY_DEFAULT = 0;
const float PULL_FREQUENCY_MIN = 0;
const float PULL_FREQUENCY_MAX = 45000;

const int AVERAGING_FACTOR_DEFAULT = 16;
const int AVE_FACTOR_MIN = 1;
const int AVE_FACTOR_MAX = 100;

const int NUMBER_OF_HOLES_DEFAULT = 32;
const int NUM_OF_HOLES_MIN = 1;
const int NUM_OF_HOLES_MAX = 100;

const int PULL_DELAY = 500;              // delay in milliseconds

/*
 * Set Pins on the Teensy
 * 
 * Pin 3 is used in the FreqMeasure function, which makes pin 
 */
const int PULLPIN = 29;                   // FTM2 timer, linked to PWM pin 30
                                          // See PWM & Tone notes  
                                          // This pin is connected to the ACS606 -PULL pin of the driver
                                          
const int DIRPIN = 6;                     // Pin set to control the motor driver direction
                                          // we do not use this.

const int GATEPIN = 23;                   // pin to readout the photosensor, OMRON EE-SX672
                                        
const int LED = 24;                       // Teensy 3.x builtin LED pin -> moved to pin 24 and external LED

/* 
 * Set variables
 *
 */

boolean newSerialData = false;            // Serial data semaphore
char receivedChars[BUFFER_LENGTH+1];      // received character string
char baseCmd[COMMAND_LENGTH+1];
char arg1[COMMAND_LENGTH+1];

boolean val;
boolean semaphore = LOW;
double sum = 0;                           // Accumulated Frequency measurements
int count = 0;                            // Freq measurement counts

boolean CHANGE_PULL_FREQ = false;
float start = 0;                          // pull start frequency
float stop = 0;                            // pull stop frequency
int q = 10;
int i = 1;
float delta;                              // difference in PULL frequency
unsigned long currentMillis;
unsigned long previousMillis;
unsigned long interval = PULL_DELAY;

float angular_frequency;                  // the period of rotation of the wheel, Hz
                                          // printed to serial output                                         

float raw_frequency;                      // Measured raw averaged frequency using FreqMeasure

int number_of_holes = NUMBER_OF_HOLES_DEFAULT; // the number of holes around the circumference of the wheel
int averaging_factor = AVERAGING_FACTOR_DEFAULT;  // Number of Freq measurements taken before the
                                          // the average is taken as the result

float pull_frequency = PULL_FREQUENCY_DEFAULT;              // set initial PULL pulse frequency, Hz
                                          // value of 4000 is about 1 Hz angular frequency (1 s/rotation)
                                          //    15 = ~0.01 Hz
                                          //  . 31 =  0.01 Hz
                                          //    62 =  0.02 Hz
                                          //   125 =  0.03 Hz
                                          //   250 =  0.06 Hz
                                          //   500 =  0.13 Hz
                                          //  1000 =  0.25 Hz
                                          //  2000 =  0.50 Hz
                                          //  4000 =  1.01 Hz
                                          //  8000 =  2.00 Hz
                                          // 10000 =  2.50 Hz
                                          // 16000 =  4.00 Hz
                                          // 20000 =  5.00 Hz
                                          // 30000 =  7.50 Hz
                                          // 32000 =  8.01 Hz
                                          // 40000 = 10.01 Hz
                                          // 45000 = 11.25 Hz


void setup() {
  resetBuffer();
  Serial.begin(USB_BAUD);
  while(!Serial);  // Wait for USB Serial to connect
  
  Serial.print(F("cmd_response started: "));
  Serial.println(FreeMem());

  pinMode(LED, OUTPUT);                   // Set built-in led pin 13
  pinMode(GATEPIN, INPUT);                // Set the OMRON EE-SX672 (NPN), Light-ON, readout
  pinMode(PULLPIN, OUTPUT);               // Set Motor Driver PULL pin to output
  pinMode(DIRPIN, OUTPUT);                // Set Motor Driver DIR pin to output
  
  digitalWrite(DIRPIN, LOW);              // Set Motor Driver DIR pin
                                          // need a transitor to sent signal to GND
                                          // Not required for NCal, we rotoating only in
                                          // a single direction

  digitalWrite(LED, LOW);                 // Set built-in led to OFF

  set_initial_pull_frequency(pull_frequency);
  set_pull_pin_pwm();

  FreqMeasure.begin();                    // Set up the photo-gate Frequency Measurement function, on pin 3.

  // call the toggle_led function every 100 millis (0.1 second)
  //timer.every(500, dummy_timer);
}


void loop() {

  recvWithStartEndMarkers();
  CommandProcess();
  readGateSignal();

  currentMillis = millis();
  delayed_pull_frequency();

  // Check if there is a signal on pin 3, 
  // to make the freq measurement available 
  if (FreqMeasure.available()) {
    // average several reading together
    sum = sum + FreqMeasure.read();
    count++;
    if (count > averaging_factor) {
      raw_frequency = FreqMeasure.countToFrequency(sum / count);
      angular_frequency = raw_frequency / number_of_holes;  // convert how many holes per second,
                                                  // to angular fereq by scaling by the number of holes
      sum = 0;
      count = 0;
    }
  } 
  
} /* loop */


/**
  * Finds the amount of free memory by calculating the difference
  * between the address of a new stack variable and the address of 
  * the end of the heap.
  * from https://forum.pjrc.com/threads/33443-How-to-display-free-ram?p=99128&viewfull=1#post99128
  */
uint32_t FreeMem(){ // for Teensy 3.0
    uint32_t stackTop;
    uint32_t heapTop;

    // current position of the stack.
    stackTop = (uint32_t) &stackTop;

    // current position of heap.
    void* hTop = malloc(1);
    heapTop = (uint32_t) hTop;
    free(hTop);

    // The difference is (approximately) the free, available ram.
    return stackTop - heapTop;
}

void set_initial_pull_frequency(float pull_freq) {
  analogWriteFrequency(PULLPIN, pull_freq);    // set PWM pulse frequency, Hz
                                               // This is an initial pulse frequency
                                               // see https://www.pjrc.com/teensy/td_pulse.html
}

void set_pull_pin_pwm() {
  analogWrite(PULLPIN, 20);               // 20/255 PWM pulse witdth, min 0.85us pulse for ACS606
                                          // The pulse width is dependent on the frequency. The pulse width
                                          // can be minimum of 0.85us the ACS606 at whihc point it does not 
                                          // register the pulse.
                                          //
                                          // Although we can set any pulse width, I set the minimum pulse width.
                                          // This also sets the maximum angular velocity of the wheel, related
                                          // to the pull_frequency, as a safety factor. E.g. we can't go faster.
                                          //
                                          // We set the max pull_frequency to 45k (safety setting), and the 
                                          // pulse width to 0.85us, the minimum PWM pulse with would be
                                          // 0.85us * 2*255 * 45k  = 19.5 -> 20
                                          // factor of 2 is a scaling to set half the period to the pulse.
}

void readGateSignal() {
  // Read Photogate signal
  val = digitalRead(GATEPIN);
   
  //If photogate detects something, turn Teensy LED on
  if ((val == HIGH) && (semaphore == 0)) {
    digitalWrite(LED, HIGH);
    semaphore = 1;
  } else if ((val == LOW) && (semaphore == 1))  {
    //Leave LED off otherwise
    digitalWrite(LED, LOW);
    semaphore = 0;
  } 
}

void recvWithStartEndMarkers() {
    // Code obtained from https://forum.arduino.cc/index.php?topic=396450
    static boolean recvInProgress = false;
    static byte ndx = 0;
    //char startMarker = START_MARKER;
    char endMarker = END_MARKER;
    char rc;
 
    while (Serial.available() > 0 && newSerialData == false) {
        rc = Serial.read();

        //if (recvInProgress == true) {
            if (rc != endMarker) {
                receivedChars[ndx] = rc;
                ndx++;
                if (ndx >= BUFFER_LENGTH) {
                    ndx = BUFFER_LENGTH - 1;
                }
            }
            else {
                receivedChars[ndx] = '\0'; // terminate the string
                recvInProgress = false;
                ndx = 0;
                newSerialData = true;
            }
        //}

        //else if (rc == startMarker) {
        //    recvInProgress = true;
        //}
    }
}

void CommandProcess() {

  char* cmd = 0;
  char temp[BUFFER_LENGTH+1];

  strcpy(temp, receivedChars);
  if (newSerialData == true) {
    //   
    cmd = strtok(temp, " ");
    strcpy(baseCmd, cmd);

    cmd = strtok(NULL, " ");
    if (cmd) {
      strcpy(arg1, cmd);

      cmd = strtok(NULL, " ");
      if (cmd) {
        Serial.print(F("ERROR_TOO_MANY_ARGUMENTS:"));
        Serial.println(temp);
        Serial.read();                 // empty serial input buffer
        }
      }

    if (strlen(baseCmd)) {
      if      (0 == strcmp(baseCmd, "?pf"))       get_pull_frequency(receivedChars);
      else if (0 == strcmp(baseCmd, "!pf"))       set_pull_frequency(receivedChars);
      else if (0 == strcmp(baseCmd, "!pd"))       set_delta_pull_frequency(receivedChars);
      else if (0 == strcmp(baseCmd, "?rf"))       get_raw_frequency(receivedChars);
      else if (0 == strcmp(baseCmd, "?af"))       get_angular_frequency(receivedChars);
      else if (0 == strcmp(baseCmd, "!k"))        set_averaging_factor(receivedChars);
      else if (0 == strcmp(baseCmd, "?k"))        get_averaging_factor(receivedChars);
      else if (0 == strcmp(baseCmd, "!h"))        set_number_of_holes(receivedChars);
      else if (0 == strcmp(baseCmd, "?h"))        get_number_of_holes(receivedChars);
      else if (0 == strcmp(baseCmd, "?v"))        get_software_version(receivedChars);
      else if (0 == strcmp(baseCmd, "?id"))       get_software_id(receivedChars);
      else {
        Serial.print(F("ERROR_UNKNOWN_COMMAND:"));
        finaliseError(receivedChars);
      }
    } /* if strlen(baseCmd) */
 
    newSerialData = false;
  } // if newSerialData
}

void finaliseError(char *in) {
  Serial.println(in);
  resetBuffer();
}

void resetBuffer() {
  receivedChars[0] = '\0';
  newSerialData = false;
  baseCmd[0] = '\0';
  arg1[0] = '\0';
}

void get_pull_frequency(char* in) {
  Serial.println(pull_frequency);  
}

void set_pull_frequency(char* in) {
  float tmp = atof(arg1);
  if (tmp < PULL_FREQUENCY_MIN || tmp > PULL_FREQUENCY_MAX) {
    Serial.print(F("ERROR_PULL_FREQUENCY_RANGE:"));
    finaliseError(in);
  } else {
    pull_frequency = tmp;
    analogWriteFrequency(PULLPIN, pull_frequency);
    
    if (CHANGE_PULL_FREQ == LOW) {
      Serial.println(F("Ok"));      // Only reply if set_pull_frequency is called directly
    }
  }
}

void set_delta_pull_frequency(char* in) {
  start = pull_frequency;
  stop = atof(arg1);
//  q = 10;
//  i = 1;
  delta = (stop - start) / q;

  if (stop < PULL_FREQUENCY_MIN || stop > PULL_FREQUENCY_MAX) {
    Serial.print(F("ERROR_DELTA_PULL_FREQUENCY_RANGE:"));
    finaliseError(in);
  } else {
//    digitalWrite(LED, HIGH);                // Turn Arduino LED on while changing velocity

    CHANGE_PULL_FREQ = HIGH;
    previousMillis = millis();
    
//    for (int i=1; i <= q; i++) {
//      pull_frequency = pull_frequency + delta;
//      analogWriteFrequency(PULLPIN, pull_frequency);
//      delay(500);
//      //timer.tick();                        // non-blocking wait for 0.1 s, calls dummy_timer, not really working for me 
//    }
//    digitalWrite(LED, LOW);                 // Turn Arduino LED off when done
//    Serial.println(F("Ok"));
  }
}

void delayed_pull_frequency() {
  
  if (CHANGE_PULL_FREQ == HIGH) {
    
    digitalWrite(LED, HIGH);
    if (currentMillis - previousMillis >= interval) {
      dtostrf(pull_frequency + delta, 9,3, arg1);
      set_pull_frequency("delayed_pull_frequency");
      previousMillis += interval;
      i++;
      if (i > q) {
        i = 1;
        CHANGE_PULL_FREQ = LOW;
        digitalWrite(LED, LOW);
        Serial.println(F("Ok"));
      }
      
    }
  }
}
  
void get_raw_frequency(char* in) {
  Serial.println(raw_frequency);
}

void get_angular_frequency(char* in) {
  Serial.println(angular_frequency);
}

void set_averaging_factor(char* in) {
  int tmp = atoi(arg1);
  if (tmp < AVE_FACTOR_MIN || tmp > AVE_FACTOR_MAX) {
    Serial.print(F("ERROR_AVERAGING_FACTOR_RANGE:"));
    finaliseError(in);
  } else {
    averaging_factor = tmp;
    Serial.println(F("Ok"));
  }
}

void get_averaging_factor(char* in) {
  Serial.println(averaging_factor);
}

void set_number_of_holes(char* in) {
  int tmp = atoi(arg1);
  if (tmp < NUM_OF_HOLES_MIN || tmp > NUM_OF_HOLES_MAX) {
    Serial.print(F("ERROR_NUMBER_OF_HOLES_RANGE:"));
    finaliseError(in);
  } else {
    number_of_holes = tmp;
    Serial.println(F("Ok"));
  }  
}

void get_number_of_holes(char* in) {
  Serial.println(number_of_holes);
}

void get_software_version(char* in) {
  Serial.println(SOFTWARE_VERSION);
}

void get_software_id(char* in) {
  Serial.println(SOFTWARE_ID);
}
